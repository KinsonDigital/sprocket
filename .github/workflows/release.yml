name: ðŸš€Release
run-name: ${{ vars.PROJECT_NAME }} ${{ inputs.release-type }} Release ${{ inputs.dry-run == true && '(Dry Run)' || '' }}


defaults:
  run:
    shell: pwsh


on:
  workflow_dispatch:
    inputs:
      release-type:
        description: The type of release.  Choose 'Production' or 'Preview'.
        required: true
        type: choice
        options: [Production, Preview]
      dry-run:
        required: false
        description: Dry Run (if true, the release will not be created)
        default: false
        type: boolean


jobs:
  get_and_validate_version:
    name: Get And Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Get Version
        id: get-version
        uses: KinsonDigital/Infrastructure/actions/get-version@v16.0.0
        with:
          version-file-path: "${{ github.workspace }}/deno.json"
          deno-version: "${{ vars.DENO_VERSION }}"
          json-prop-path: "version"

      - name: Validate Version
        id: validate-version
        uses: KinsonDigital/Infrastructure/actions/validate-version@v16.0.0
        with:
          version: "${{ steps.get-version.outputs.version}}"
          release-type: "${{ inputs.release-type }}"
          deno-version: "${{ vars.DENO_VERSION }}"


  run_prerelease_validation:
    name: Run Pre-Release Validation
    needs: [get_and_validate_version]
    runs-on: ubuntu-latest
    steps:
      - name: Check Branch
        id: check-branch
        continue-on-error: true
        run: |
          if ("${{ github.ref_name }}" -ne "main") {
            exit 1;
          }

      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Set Up Deno (${{ vars.DENO_VERSION }})
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ vars.DENO_VERSION }}
          cache: true

      - name: Milestone Exists
        id: milestone-exists
        uses: KinsonDigital/Infrastructure/actions/milestone-exists@v16.0.0
        with:
          owner-name: "${{ vars.ORGANIZATION_NAME }}"
          repo-name: "${{ vars.PROJECT_NAME }}"
          milestone-name: "v${{ needs.get_and_validate_version.outputs.version }}"
          github-token: "${{ secrets.CICD_TOKEN }}"
          deno-version: "${{ vars.DENO_VERSION }}"

      - name: Validate Milestone Items
        id: milestone-items-check
        uses: KinsonDigital/Infrastructure/actions/milestone-items-closed@v16.0.0
        with:
          owner-name: "${{ vars.ORGANIZATION_NAME }}"
          repo-name: "${{ vars.PROJECT_NAME }}"
          milestone-name: "v${{ needs.get_and_validate_version.outputs.version }}"
          github-token: "${{ secrets.CICD_TOKEN }}"
          deno-version: "${{ vars.DENO_VERSION }}"
          fail-if-all-items-not-closed: true
        continue-on-error: false

      - name: JSR Package Exists
        id: jsr-package-exists
        uses: KinsonDigital/Infrastructure/actions/jsr-pkg-exists@v16.0.0
        with:
          scope: "${{ vars.JSR_SCOPE }}"
          pkg-name: "${{ vars.JSR_SCOPE }}"
          version: "${{ needs.get_and_validate_version.outputs.version }}"
          deno-version: "${{ vars.DENO_VERSION }}"
          fail-if-exists: true
        continue-on-error: true

      - name: Lowercase Release Type
        id: release-type
        run: |
          $releaseType = "${{ inputs.release-type }}".ToLower();
          "release-type=$releaseType" > "$env:GITHUB_OUTPUT";

      - name: Release Notes Exist
        id: release-notes-check
        uses: KinsonDigital/Infrastructure/actions/release-notes-exist@v16.0.0
        with:
          release-notes-file-path: "${{ github.workspace }}/release-notes/${{ steps.release-type.outputs.release-type }}-releases/Release-Notes-v${{ needs.get_and_validate_version.outputs.version }}.md"
          deno-version: "${{ vars.DENO_VERSION }}"
          fail-if-does-not-exist: true
        continue-on-error: true

      - name: GitHub Release Exists
        id: github-release-check
        uses: KinsonDigital/Infrastructure/actions/github-release-exists@v16.0.0
        with:
          owner-name: "${{ vars.ORGANIZATION_NAME }}"
          repo-name: "${{ vars.PROJECT_NAME }}"
          tag-name: "v${{ needs.get_and_validate_version.outputs.version }}"
          deno-version: "${{ vars.DENO_VERSION }}"
          github-token: "${{ secrets.CICD_TOKEN }}"
        continue-on-error: true
    
      - name: Should Fail Job
        run: |
          $validBranch = "${{ steps.check-branch.outcome == 'failure' }}";
          $milestoneExists = "${{ steps.milestone-exists.outputs.milestone-exists }}";
          $milestoneItemsCheckFailed = "${{ steps.milestone-items-check.outcome == 'failure' }}";

          $jsrPkgExists = "${{ steps.jsr-package-exists.outcome == 'failure' }}";

          $releaseNotesCheckFailed = "${{ steps.release-notes-check.outcome == 'failure' }}";
          $githubReleaseCheckFailed = "${{ steps.github-release-check.outcome == 'failure' }}";

          if ($validBranch -eq "true") {
            Write-Host "::error::The branch '${{ github.ref_name }}' is invalid.  Must run on the 'main' branch.";
          }

          if ($milestoneExists -eq "false") {
            Write-Host "::error::The milestone '${{ needs.get_and_validate_version.outputs.version }}' does not exist.";
          }

          if ($milestoneItemsCheckFailed -eq "true") {
            Write-Host "::error::The milestone '${{ needs.get_and_validate_version.outputs.version }}' has one or more issues that are not closed or prs that are in draft.";
          }
          
          if ($jsrPkgExists -eq "true") {
            Write-Host "::error::The JSR package '${{ vars.JSR_PACKAGE_NAME }}' for version '${{ needs.get_and_validate_version.outputs.version }}' already exists.";
          }

          if ($releaseNotesCheckFailed -eq "true") {
            Write-Host "::error::The release notes do not exist.";
          }

          if ($githubReleaseCheckFailed -eq "true") {
            Write-Host "::error::The GitHub release already exists.";
          }

          if ($validBranch -eq "true" `
              -or $milestoneExists -eq "false" `
              -or $milestoneItemsCheckFailed -eq "true" `
              -or $jsrPkgExists -eq "true" `
              -or $releaseNotesCheckFailed -eq "true" `
              -or $githubReleaseCheckFailed -eq "true") {
            exit 1;
          }


  release:
    name: Run ${{ inputs.release-type }} Release
    runs-on: ubuntu-latest
    needs: [get_and_validate_version, run_prerelease_validation]
    permissions:
      id-token: write # The OIDC ID token is used for authentication with JSR.
    steps:
      - name: Set Up Deno (${{ vars.DENO_VERSION }})
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ vars.DENO_VERSION }}
          cache: true

      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Run Check
        id: deno-check
        continue-on-error: true
        run: deno check **/*/*.ts;

      - name: Run Lint
        id: deno-lint
        continue-on-error: true
        run: deno lint **/*.ts;

      - name: Deno Format
        id: deno-format
        continue-on-error: true
        run: deno fmt --check ./**/*.ts;

      - name: Run Tests
        id: deno-tests
        continue-on-error: true
        run: deno test -R ./tests/*tests.ts;

      - name: Validate Checks ${{ inputs.dry-run == true && '(Dry Run)' || '' }}
        run: |
          $lintFailed = "${{ steps.deno-lint.outcome }}" -eq "failure";
          $formatFailed = "${{ steps.deno-format.outcome }}" -eq "failure";
          $checkFailed = "${{ steps.deno-check.outcome }}" -eq "failure";
          $testsFailed = "${{ steps.deno-tests.outcome }}" -eq "failure";

          if ($lintFailed) {
            Write-Host "::error::The lint check has failed.";
          }

          if ($formatFailed) {
            Write-Host "::error::The format has failed.";
          }

          if ($checkFailed) {
            Write-Host "::error::The check has failed.";
          }

          if ($testsFailed) {
            Write-Host "::error::The tests have failed.";
          }

          if ($lintFailed -or $formatFailed -or $checkFailed -or $testsFailed) {
            exit "${{ inputs.dry-run }}" -eq "true" ? 0 : 1;
          }

      - name: Publish To JSR ${{ inputs.dry-run == true && '(Dry Run)' || '' }}
        if: inputs.dry-run == false
        run: deno publish --config "${{ github.workspace }}/jsr.json";

      - name: Lowercase Release Type
        id: release-type
        run: |
          $releaseType = "${{ inputs.release-type }}".Trim().ToLower();
          "release-type=$releaseType" >> $env:GITHUB_OUTPUT;

      - name: Creating ${{ inputs.release-type }} GitHub Release
        if: inputs.dry-run == false
        uses: softprops/action-gh-release@v2
        with: 
          name: "ðŸš€${{ inputs.release-type }} Release - v${{ needs.get_and_validate_version.outputs.version }}" 
          body_path: "${{ github.workspace }}/release-notes/${{ steps.release-type.outputs.release-type }}-releases/Release-Notes-v${{ needs.get_and_validate_version.outputs.version }}.md"
          files: "${{ github.workspace }}/release-notes/${{ steps.release-type.outputs.release-type }}-releases/Release-Notes-v${{ needs.get_and_validate_version.outputs.version }}.md"
          tag_name: "v${{ needs.get_and_validate_version.outputs.version }}"
          prerelease: ${{ inputs.release-type == 'Preview' }}
          draft: false
          token: "${{ secrets.CICD_TOKEN }}"

      - name: Close Milestone ${{ inputs.dry-run == true && '(Dry Run)' || '' }}
        if: inputs.dry-run == false
        uses: KinsonDigital/Infrastructure/actions/close-milestone@v16.0.0
        with:
          repo-owner: "${{ vars.ORGANIZATION_NAME }}"
          repo-name: "${{ vars.PROJECT_NAME }}"
          github-token: "${{ secrets.CICD_TOKEN }}"
          milestone-title: "v${{ needs.get_and_validate_version.outputs.version }}"
          deno-version: "${{ vars.DENO_VERSION }}"
